import asyncio
import math
import logging
import re
import sys
import pandas as pd
import chardet
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, quote
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums.parse_mode import ParseMode
import idna
from aiogram.types.input_file import BufferedInputFile
from concurrent.futures import ThreadPoolExecutor
import io
import unicodedata
import aiohttp
import difflib
from aiohttp_retry import RetryClient, ExponentialRetry
from datetime import datetime
from aiogram.utils.markdown import html_decoration as hd
from aiogram.utils.markdown import hbold, hcode, hlink
from db import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
executor = ThreadPoolExecutor(max_workers=5)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_TOKEN = "7626300396:AAHxkGqY2GnarCEoxVlm9IfS-MCAfvG6fSM"
ADMIN_USERNAME = '@lprost'
ORDER_CHANNEL = -1002310332672
MAX_ROWS_PER_FILE = 1000
BASE_URL = "https://xn--80aaijtwglegf.xn--p1ai/"
admin_ids = [5056594883, 6521061663]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
categories = []
products = []
products_by_id = {}
categories_dict = {}
user_carts = {}

# –ú–∞–ø–ø–∏–Ω–≥ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
SIMILAR_CHARS_MAP = {
    '–ê': 'A', '–í': 'B', '–ï': 'E', '–ö': 'K', '–ú': 'M', '–ù': 'H',
    '–û': 'O', '–†': 'P', '–°': 'C', '–¢': 'T', '–£': 'Y', '–•': 'X',
    '–∞': 'A', '–≤': 'B', '–µ': 'E', '–∫': 'K', '–º': 'M', '–Ω': 'H',
    '–æ': 'O', '—Ä': 'P', '—Å': 'C', '—Ç': 'T', '—É': 'Y', '—Ö': 'X',
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderQuantity(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_contact = State()
    waiting_for_address = State()

class UploadStates(StatesGroup):
    waiting_for_categories = State()
    waiting_for_products = State()

class UserStates(StatesGroup):
    waiting_for_article_request = State()
    article_requested_once = State()

class MultipleArticlesStates(StatesGroup):
    waiting_for_file = State()

class OrderStates(StatesGroup):
    waiting_for_contact = State()
    waiting_for_address = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_content = State()
    waiting_for_categories = State()
    waiting_for_products = State()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def remove_keyboard():
    return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

def get_cart_confirmation_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"),
                KeyboardButton(text="üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏"),
            ],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_back_to_main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def get_product_keyboard(product_id, quantity_available):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_{product_id}_{quantity_available}"
        )]
    ])

def get_cart_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"), KeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_support_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
            url="https://t.me/zucman61"
        )]
    ])

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")],
            [KeyboardButton(text="üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

# –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def shorten_url_yandex(long_url: str) -> str | None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ clck.ru"""
    try:
        response = requests.get(f'https://clck.ru/--?url={quote(long_url)}')
        if response.status_code == 200:
            return response.text
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {response.status_code}")
        return None
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ clck.ru")
        return None

async def shorten_url_yandex_async(long_url: str) -> str | None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ —Å –ª–∏–º–∏—Ç–æ–º 0.2 —Å–µ–∫—É–Ω–¥—ã"""
    loop = asyncio.get_event_loop()
    result = await loop.run_in_executor(executor, shorten_url_yandex, long_url)
    await asyncio.sleep(0.2)
    return result

def split_message(text: str, max_length: int = 4096) -> list:
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    parts = []
    while len(text) > max_length:
        split_pos = text.rfind('\n', 0, max_length)
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:]
    parts.append(text)
    return parts

def normalize_article(article: str) -> str:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if not article:
        return ''
    article = str(article)
    article = unicodedata.normalize('NFKC', article).upper()
    # –ó–∞–º–µ–Ω–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    article = ''.join(SIMILAR_CHARS_MAP.get(ch, ch) for ch in article)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    article = re.sub(r'[^A-Z0-9\s\-\./]', '', article)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    article = ' '.join(article.split())
    return article

def get_product_image_url(product: dict) -> str | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    img = product.get('_IMAGE_', '').strip()
    if img:
        return img if img.startswith('http') else urljoin(BASE_URL, img)
    for field in ['_IMAGES_', '_PRODUCT_IMAGES_']:
        imgs = product.get(field)
        if imgs:
            first_img = imgs.split(';')[0].strip()
            if first_img:
                return first_img if first_img.startswith('http') else urljoin(BASE_URL, first_img)
    return None

async def get_image_url_from_product_page(url: str) -> str | None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        img_tag = soup.select_one('.product-image img') or soup.select_one('.product-page img')
        if img_tag and img_tag.get('src'):
            img_url = img_tag['src']
            if not img_url.startswith('http'):
                img_url = urljoin(url, img_url)
            return img_url
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ç–æ —Å —Å–∞–π—Ç–∞ {url}: {e}")
    return None

def find_product_by_article(article_query: str, products: list, use_cache=True):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É"""
    norm_query = normalize_article(article_query)
    query_words = norm_query.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    first_query_word = query_words[0] if query_words else norm_query  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø—É—Å—Ç–æ

    if use_cache:
        if not hasattr(find_product_by_article, '_cache'):
            find_product_by_article._cache = {}
            find_product_by_article._sku_map = {}
            find_product_by_article._name_map = {}
            find_product_by_article._products = products

            for p in products:
                norm_sku = normalize_article(p.get('_SKU_', ''))
                norm_name = normalize_article(p.get('_NAME_', ''))
                if norm_sku:
                    find_product_by_article._cache[norm_sku] = p
                    find_product_by_article._sku_map[norm_sku] = p
                if norm_name:
                    find_product_by_article._cache[norm_name] = p
                    find_product_by_article._name_map[norm_name] = p

        # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (SKU)
        if norm_query in find_product_by_article._sku_map:
            return [find_product_by_article._sku_map[norm_query]]

        # 2. –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∞–∑–≤–∞–Ω–∏—è
        matched_products = []
        for key, prod in find_product_by_article._name_map.items():
            prod_words = key.split()
            if prod_words and first_query_word.lower() == prod_words[0].lower():  # Case-insensitive match
                matched_products.append(prod)

        if matched_products:
            return matched_products

        # 3. –î–ª—è –æ–¥–Ω–æ—Å–ª–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —ç—Ç–æ —Å–ª–æ–≤–æ
        if len(query_words) == 1:
            matched_products = []
            for key, prod in find_product_by_article._name_map.items():
                if first_query_word.lower() in key.lower():  # Case-insensitive search
                    matched_products.append(prod)
            if matched_products:
                return matched_products

        # 4. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
        if norm_query in find_product_by_article._name_map:
            return [find_product_by_article._name_map[norm_query]]

        # 5. Fuzzy –ø–æ–∏—Å–∫ –ø–æ NAME
        name_keys = list(find_product_by_article._name_map.keys())
        close_names = difflib.get_close_matches(norm_query, name_keys, n=1, cutoff=0.6)
        if close_names:
            return [find_product_by_article._name_map[close_names[0]]]

        # 6. Fuzzy –ø–æ–∏—Å–∫ –ø–æ SKU
        sku_keys = list(find_product_by_article._sku_map.keys())
        close_skus = difflib.get_close_matches(norm_query, sku_keys, n=1, cutoff=0.6)
        if close_skus:
            return [find_product_by_article._sku_map[close_skus[0]]]

        return None
    else:
        # –õ–æ–≥–∏–∫–∞ –±–µ–∑ –∫—ç—à–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è)
        matched_products = []
        for p in products:
            norm_sku = normalize_article(p.get('_SKU_', ''))
            norm_name = normalize_article(p.get('_NAME_', ''))
            prod_words = norm_name.split()
            if prod_words and first_query_word.lower() == prod_words[0].lower():  # Case-insensitive match
                matched_products.append(p)
        if matched_products:
            return matched_products
        return None

def find_product_by_excel_row(row: dict, products: list):
    """
    –ò—â–µ—Ç —Ç–æ–≤–∞—Ä —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–∑ Excel, –∑–∞—Ç–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
    row - —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ '–ê—Ä—Ç–∏–∫—É–ª' –∏ '–ù–∞–∑–≤–∞–Ω–∏–µ'
    """
    product = find_product_by_article(row.get('–ê—Ä—Ç–∏–∫—É–ª', ''), products)
    if product is None:
        product = find_product_by_article(row.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''), products)
    return product

def clear_find_product_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–∏—Å–∫–∞"""
    if hasattr(find_product_by_article, '_cache'):
        del find_product_by_article._cache

def parse_price(price_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        price_clean = str(price_str).replace(' ', '').replace(',', '.')
        return float(price_clean)
    except:
        return 0.0

def normalize_sku(sku: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞"""
    return str(sku).replace('.', '').strip()

def format_product_info(product: dict, short_url: str = None, sku: str = None, category: str = None) -> str:
    if sku is None:
        sku = product.get('_SKU_', '')
    if isinstance(sku, float) and str(sku).lower() == 'nan':
        sku = ''
    name = product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    price = product.get('_PRICE_', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    try:
        price_str = f"{float(price):.2f} ‚ÇΩ"
    except (ValueError, TypeError):
        price_str = str(price)
    quantity = product.get('_QUANTITY_', 0)
    text = (
        f"üõ†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {hbold(name)}\n"
        f"üîñ –ê—Ä—Ç–∏–∫—É–ª: {hcode(sku)}\n"
        f"üí∞ –¶–µ–Ω–∞: {hbold(price_str)}\n"
        f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {hbold(str(quantity))} —à—Ç.\n"
    )
    if category:
        text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hbold(category)}\n"
    if short_url:
        text += f"üîó {hlink('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', short_url)}\n"
    return text


async def send_message_in_parts(message: types.Message, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏"""
    for part in split_message(text):
        await message.answer(part, **kwargs)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    await db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    original_url = "https://–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ/image/catalog/logoagro3.png"
    punycode_domain = idna.encode("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ").decode()
    photo_url = original_url.replace("–∞–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ", punycode_domain)
    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç.\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "1Ô∏è‚É£ *üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞* - –≤–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n"
        "2Ô∏è‚É£ *üìä –ü—Ä–æ—Å—á—ë—Ç Excel —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏* - –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º, –∏ —è —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
        "3Ô∏è‚É£ *üõí –ö–æ—Ä–∑–∏–Ω–∞* - –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.\n"
        "4Ô∏è‚É£ *üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π* - –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.\n\n"
        "üîπ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —É —Ç–µ–±—è –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ *üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—é–¥–∞.\n"
        "üîπ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É\" –∏ —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n"
        "üîπ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
        "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫! üõçÔ∏è"
    )
    await message.answer_photo(
        photo=photo_url,
        caption=caption,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üë®‚Äçüíª –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    text = (
        "üìû *–î–∏—Ä–µ–∫—Ç–æ—Ä –û–û–û –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä:*\n –Æ—Ä–∏–π –ú–æ—Ä–æ–∑\n"
        "üìß *–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:* agrosnaiper@yandex.ru\n"
        "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 (928) 279-05-29\n\n"
        "–°–∞–π—Ç: –ê–≥—Ä–æ—Å–Ω–∞–π–ø–µ—Ä.—Ä—Ñ"
    )
    await send_message_in_parts(
        message,
        text,
        parse_mode="Markdown",
        reply_markup=get_support_inline_keyboard()
    )

@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id in admin_ids:
        await state.clear()
        await message.answer(
            "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@dp.message(F.text == "üè† –í—ã—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_admin_panel(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id in admin_ids:
        await state.clear()
        await message.answer(
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

@dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def start_broadcast(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    await message.answer(
        "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...",
        reply_markup=remove_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_broadcast_content)

@dp.message(AdminStates.waiting_for_broadcast_content)
async def process_broadcast_content(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        await state.clear()
        return
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    users = await db.get_all_users()
    success_count = 0
    fail_count = 0
    if message.photo:
        photo = message.photo[-1].file_id
        caption = message.caption or ""
        send_func = bot.send_photo
        send_kwargs = {"photo": photo, "caption": caption}
    elif message.video:
        video = message.video.file_id
        caption = message.caption or ""
        send_func = bot.send_video
        send_kwargs = {"video": video, "caption": caption}
    elif message.text:
        send_func = bot.send_message
        send_kwargs = {"text": message.text}
    else:
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        await state.clear()
        return
    async def send_to_user(user_id):
        nonlocal success_count, fail_count
        try:
            await send_func(chat_id=user_id, **send_kwargs)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            fail_count += 1
    tasks = [send_to_user(user_id) for user_id, _ in users]
    await asyncio.gather(*tasks)
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {fail_count}",
        reply_markup=get_admin_keyboard()
    )
    await state.clear()

@dp.message(F.text == "üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
async def load_products(message: types.Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    if message.from_user.id in admin_ids:
        await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(UploadStates.waiting_for_products)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=get_back_to_main_menu_keyboard())
        return
    users = await db.get_all_users()
    users_count = len(users)
    await message.answer(
        f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {users_count}\n"
        f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}",
        reply_markup=get_admin_keyboard()
    )

@dp.message(UploadStates.waiting_for_products, F.document)
async def process_products_file(message: types.Message, state: FSMContext):
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        raw_data = file_content.read()

        result = chardet.detect(raw_data)
        encoding = result['encoding'] or 'utf-8'

        df = pd.read_csv(io.BytesIO(raw_data), sep=';', encoding=encoding, header=0)
        df.columns = df.columns.str.strip('"').str.strip()

        global products, products_by_id
        products = df.to_dict('records')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for product in products:
            product['category_name'] = product.get('_CATEGORY_', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

        products_by_id = {str(p['_ID_']): p for p in products if '_ID_' in p}

        clear_find_product_cache()  # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤.", reply_markup=get_admin_keyboard())
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}", reply_markup=get_admin_keyboard())
        await state.clear()

@dp.message(F.text == "üîç –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞")
async def start_single_article(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=get_back_to_main_menu_keyboard())
    await state.set_state(UserStates.waiting_for_article_request)

@dp.message(UserStates.waiting_for_article_request)
async def handle_article_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    print(f"handle_article_request –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    text = message.text.strip()

    if text in ["üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "üõí –ö–æ—Ä–∑–∏–Ω–∞", "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"]:
        if text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
            await clear_cart_func(message, state)
            await state.clear()
        elif text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
            await checkout_func(message, state)
        elif text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            await show_cart_func(message, state)
            await state.clear()
        elif text == "üè† –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é":
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_keyboard())
            await state.clear()
        return

    raw_query = text
    norm_query = normalize_article(raw_query)
    logging.info(f"–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: raw_query='{raw_query}', norm_query='{norm_query}', first_word='{norm_query.split()[0] if norm_query.split() else ''}'")

    products_found = find_product_by_article(raw_query, products)
    if products_found:
        for product in products_found:
            product_url = product.get('_URL_')
            photo_sent = False

            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            if product_url:
                try:
                    response = requests.get(product_url, timeout=10)
                    response.raise_for_status()
                    soup = BeautifulSoup(response.content, 'html.parser')
                    img_tag = soup.select_one('.product-image img') or soup.select_one('.product-page img')
                    if not img_tag:
                        img_tags = soup.find_all('img')
                        for tag in img_tags:
                            src = tag.get('src', '')
                            if norm_query.split()[0].lower() in normalize_article(src).lower() or 'product' in src.lower():
                                img_tag = tag
                                break
                    if img_tag and img_tag.get('src'):
                        img_url = img_tag['src']
                        if not img_url.startswith('http'):
                            img_url = urljoin(product_url, img_url)
                        caption = "üñº –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:"
                        await message.answer_photo(photo=img_url, caption=caption)
                        photo_sent = True
                    else:
                        await message.answer("‚ö†Ô∏è –§–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)[:50]}")
            else:
                await message.answer("‚ö†Ô∏è URL —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É
            short_url = await shorten_url_yandex_async(product_url) if product_url else None
            if not short_url or not short_url.startswith('http'):
                short_url = product_url

            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_name = product.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"üõ†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {hbold(product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))}\n"
                f"üîñ –ê—Ä—Ç–∏–∫—É–ª: {hcode(product.get('_SKU_', ''))}\n"
                f"üí∞ –¶–µ–Ω–∞: {hbold(str(product.get('_PRICE_', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')))} ‚ÇΩ\n"
                f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {hbold(str(product.get('_QUANTITY_', 0)))} —à—Ç.\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {hbold(category_name)}\n"
            )
            if short_url:
                text += f"üîó {hlink('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', short_url)}\n"

            logging.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: {text}")
            quantity_available = int(product.get('_QUANTITY_', 0))
            product_id = product.get('_ID_')
            await send_message_in_parts(
                message,
                text,
                reply_markup=get_product_keyboard(product_id, quantity_available),
                parse_mode='HTML'
            )
        await state.update_data(article_requested_once=True)
    else:
        logging.warning(f"–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {raw_query}")
        await message.answer(
            f"‚ùå –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{raw_query}' (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –∫–∞–∫ '{norm_query}') –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_main_menu_keyboard()
        )
        await state.clear()

@dp.message(MultipleArticlesStates.waiting_for_file, F.document)
async def process_multiple_articles_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    user_id = message.from_user.id
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É...", reply_markup=get_back_to_main_menu_keyboard())

    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_content = await bot.download_file(file.file_path)
        raw_data = file_content.read()

        df = pd.read_excel(io.BytesIO(raw_data), dtype=str)

        if df.shape[1] < 3:
            await message.answer("‚ùó –í —Ñ–∞–π–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å—Ç–æ–ª–±—Ü–∞: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
            return

        rows = []
        total_sum = 0.0
        total_added_quantity = 0

        if user_id not in user_carts:
            user_carts[user_id] = {}

        for _, row in df.iterrows():
            try:
                quantity_str = str(row.iloc[2]).strip()
                if not quantity_str.isdigit():
                    continue
                quantity = int(quantity_str)

                row_dict = {
                    '–ê—Ä—Ç–∏–∫—É–ª': str(row.iloc[0]),
                    '–ù–∞–∑–≤–∞–Ω–∏–µ': str(row.iloc[1]) if not pd.isna(row.iloc[1]) else ''
                }

                product = find_product_by_excel_row(row_dict, products)
                if product:
                    product_id = str(product.get('_ID_'))
                    price = parse_price(product.get('_PRICE_', '0'))
                    available = int(product.get('_QUANTITY_', 0))
                    name = row_dict['–ù–∞–∑–≤–∞–Ω–∏–µ'] if row_dict['–ù–∞–∑–≤–∞–Ω–∏–µ'] else product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

                    quantity_to_add = min(quantity, available)

                    if product_id in user_carts[user_id]:
                        user_carts[user_id][product_id]['quantity'] += quantity_to_add
                    else:
                        user_carts[user_id][product_id] = {
                            'quantity': quantity_to_add,
                            'price': price,
                            'name': name
                        }

                    sum_price = price * quantity_to_add
                    total_sum += sum_price
                    total_added_quantity += quantity_to_add

                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": row_dict['–ê—Ä—Ç–∏–∫—É–ª'],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": quantity_to_add,
                        "–¶–µ–Ω–∞": price,
                        "–î–æ—Å—Ç—É–ø–Ω–æ": available,
                        "–°—É–º–º–∞": sum_price,
                        "–°—Ç–∞—Ç—É—Å": "–î–æ–±–∞–≤–ª–µ–Ω–æ"
                    })
                else:
                    rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": row_dict['–ê—Ä—Ç–∏–∫—É–ª'],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ": row_dict['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": 0,
                        "–¶–µ–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–î–æ—Å—Ç—É–ø–Ω–æ": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "–°—É–º–º–∞": 0,
                        "–°—Ç–∞—Ç—É—Å": "–ù–µ –Ω–∞–π–¥–µ–Ω"
                    })

            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏: {e}")
                rows.append({
                    "–ê—Ä—Ç–∏–∫—É–ª": row_dict.get('–ê—Ä—Ç–∏–∫—É–ª', ''),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ": row_dict.get('–ù–∞–∑–≤–∞–Ω–∏–µ', ''),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ)": quantity_str,
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)": 0,
                    "–¶–µ–Ω–∞": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "–î–æ—Å—Ç—É–ø–Ω–æ": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    "–°—É–º–º–∞": 0,
                    "–°—Ç–∞—Ç—É—Å": f"–û—à–∏–±–∫–∞: {str(e)[:50]}"
                })

        if not rows:
            await message.answer("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã.", reply_markup=get_back_to_main_menu_keyboard())
            await state.clear()
            return

        df_result = pd.DataFrame(rows)
        total_rows = len(df_result)
        num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
        logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {total_rows}, –ª–∏—Å—Ç–æ–≤ –±—É–¥–µ—Ç: {num_sheets}")

        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            for i in range(num_sheets):
                start = i * MAX_ROWS_PER_FILE
                end = min(start + MAX_ROWS_PER_FILE, total_rows)
                part_df = df_result.iloc[start:end]
                sheet_name = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_{i+1}'
                part_df.to_excel(writer, index=False, sheet_name=sheet_name)
                worksheet = writer.sheets[sheet_name]
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 40)
                worksheet.set_column('C:D', 18)
                worksheet.set_column('E:G', 15)
                worksheet.set_column('H:H', 15)

        output.seek(0)
        filename = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ–∏—Å–∫–∞_–≤_–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö_–ª–∏—Å—Ç–∞—Ö.xlsx"
        doc = BufferedInputFile(output.read(), filename=filename)
        await bot.send_document(chat_id=user_id, document=doc, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({num_sheets} –ª–∏—Å—Ç–æ–≤)", reply_markup=get_back_to_main_menu_keyboard())

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É: {total_added_quantity} –Ω–∞ —Å—É–º–º—É {total_sum:.2f} ‚ÇΩ", reply_markup=get_back_to_main_menu_keyboard())
        await show_cart_func(message, state)
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_func(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    await state.clear()
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return
    await message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–æ–π‚Ä¶")
    cart_items = list(user_carts[user_id].items())
    product_ids = [str(pid) for pid, _ in cart_items]
    rows = []
    for product_id, product_info in cart_items:
        pid_str = str(product_id)
        product = products_by_id.get(pid_str, {})
        category_name = product.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        long_url = product.get('_URL_', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
        rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": pid_str,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": product_info.get('name', ''),
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
            "–°—Å—ã–ª–∫–∞": long_url,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": product_info.get('quantity', 0),
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": product_info.get('price', 0),
            "–°—É–º–º–∞": product_info.get('price', 0) * product_info.get('quantity', 0)
        })
    df = pd.DataFrame(rows)
    total_rows = len(df)
    num_sheets = math.ceil(total_rows / MAX_ROWS_PER_FILE)
    logging.info(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_rows}, –ª–∏—Å—Ç–æ–≤ –±—É–¥–µ—Ç: {num_sheets}")
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        for i in range(num_sheets):
            start = i * MAX_ROWS_PER_FILE
            end = min(start + MAX_ROWS_PER_FILE, total_rows)
            part_df = df.iloc[start:end]
            if part_df.empty:
                logging.info(f"–õ–∏—Å—Ç {i+1} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            sheet_name = f"–ö–æ—Ä–∑–∏–Ω–∞_{i+1}"
            part_df.to_excel(writer, index=False, sheet_name=sheet_name)
            worksheet = writer.sheets[sheet_name]
            worksheet.set_column('A:A', 20)
            worksheet.set_column('B:B', 40)
            worksheet.set_column('C:C', 25)
            worksheet.set_column('D:D', 50)
            worksheet.set_column('E:E', 15)
            worksheet.set_column('F:F', 15)
            worksheet.set_column('G:G', 15)
    output.seek(0)
    file_name = "–ö–æ—Ä–∑–∏–Ω–∞_–≤—Å—è_—á–∞—Å—Ç—è–º–∏.xlsx"
    file = BufferedInputFile(output.read(), filename=file_name)
    await bot.send_document(chat_id=user_id, document=file, caption="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤)")
    total_sum = sum(row["–°—É–º–º–∞"] for row in rows)
    await message.answer(f"üõí –ò—Ç–æ–≥–æ: {total_sum:.2f} ‚ÇΩ", reply_markup=get_cart_keyboard())

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product_id, quantity_available_str = parts[1], parts[2]
    try:
        quantity_available = int(quantity_available_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    product = next((p for p in products if str(p['_ID_']) == product_id), None)
    if product:
        price = parse_price(product.get('_PRICE_', '0'))
        product_data = {
            'product_id': product_id,
            'quantity_available': quantity_available,
            'price': price,
            'name': product.get('_NAME_', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        }
        await state.update_data(**product_data)
        await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å. {quantity_available} —à—Ç.):", reply_markup=get_back_to_main_menu_keyboard())
        await state.set_state(OrderQuantity.waiting_for_quantity)
    else:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(OrderQuantity.waiting_for_quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    data = await state.get_data()
    product_id = data.get('product_id')
    quantity_available = data.get('quantity_available')
    price = data.get('price')
    name = data.get('name')
    if not all([product_id, quantity_available, price, name]):
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", reply_markup=get_back_to_main_menu_keyboard())
        await state.clear()
        return
    try:
        quantity = int(message.text)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=get_back_to_main_menu_keyboard())
        return
    if quantity <= 0 or quantity > quantity_available:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ {quantity_available}:", reply_markup=get_back_to_main_menu_keyboard())
        return
    user_id = message.from_user.id
    if user_id not in user_carts:
        user_carts[user_id] = {}
    user_carts[user_id][product_id] = {
        'quantity': quantity,
        'price': price,
        'name': name
    }
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=get_cart_keyboard()
    )
    await state.set_state(UserStates.waiting_for_article_request)

@dp.message(F.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart_func(message: types.Message, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = message.from_user.id
    if user_id in user_carts:
        user_carts[user_id].clear()
    await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())
    await state.clear()

@dp.message(F.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout_func(message: types.Message, state: FSMContext):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_id = message.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(OrderStates.waiting_for_contact)

@dp.message(OrderStates.waiting_for_contact)
async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    contact_raw = message.text.strip()
    digits = re.sub(r'\D', '', contact_raw)
    if len(digits) == 11 and digits.startswith('8'):
        formatted = '+7' + digits[1:]
    elif len(digits) == 11 and digits.startswith('7'):
        formatted = '+' + digits
    elif len(digits) == 10:
        formatted = '+7' + digits
    else:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX:")
        return
    await state.update_data(contact=formatted)
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

@dp.message(OrderStates.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    data = await state.get_data()
    contact = data.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω")
    user_id = message.from_user.id
    current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
    cart_items = user_carts.get(user_id, {})
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return
    total_sum = sum(item['price'] * item['quantity'] for item in cart_items.values())
    order_data = {
        'user_id': user_id,
        'username': message.from_user.username or "–ë–µ–∑ username",
        'contact': contact,
        'address': address,
        'total_sum': total_sum,
        'items': list(cart_items.values()),
        'order_time': current_time
    }
    excel_file = await generate_excel(order_data)
    await send_client_confirmation(message, order_data, excel_file)
    await notify_order(order_data, excel_file)
    user_carts[user_id].clear()
    await state.clear()

async def generate_excel(order_data: dict) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    data = []
    for item in order_data['items']:
        data.append({
            "–ù–∞–∑–≤–∞–Ω–∏–µ": item['name'],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": item['quantity'],
            "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": item['price'],
            "–°—É–º–º–∞": item['price'] * item['quantity']
        })
    df = pd.DataFrame(data)
    total_row = pd.DataFrame([{
        "–ù–∞–∑–≤–∞–Ω–∏–µ": "–ò—Ç–æ–≥–æ",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "",
        "–¶–µ–Ω–∞ –∑–∞ —à—Ç.": "",
        "–°—É–º–º–∞": order_data['total_sum']
    }])
    df = pd.concat([df, total_row], ignore_index=True)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–ó–∞–∫–∞–∑', index=False)
        writer.close()
    output.seek(0)
    return output.read()

async def send_client_confirmation(message: types.Message, order_data: dict, excel_file: bytes):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
    order_summary = (
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {hd.quote(order_data['contact'])}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {hd.quote(order_data['address'])}\n\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> {order_data['total_sum']:.2f} ‚ÇΩ\n\n"
        "üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ."
    )
    await message.answer(
        order_summary,
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    await bot.send_document(
        chat_id=message.chat.id,
        document=BufferedInputFile(excel_file, filename="–ó–∞–∫–∞–∑.xlsx")
    )
    contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            url=f"https://t.me/{ADMIN_USERNAME}"
        )]
    ])
    await message.answer(
        "üì¢ –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        reply_markup=contact_keyboard
    )

async def notify_order(order_data: dict, excel_file: bytes):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"""
    text = (
        "üö® <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order_data['username']}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> <code>{hd.quote(order_data['contact'])}</code>\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {hd.quote(order_data['address'])}\n\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {order_data['total_sum']:.2f} ‚ÇΩ\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {hd.quote(order_data['order_time'])}"
    )
    for admin_id in admin_ids:
        try:
            await bot.send_document(
                chat_id=admin_id,
                document=BufferedInputFile(
                    excel_file,
                    filename=f"–ó–∞–∫–∞–∑_{order_data['user_id']}.xlsx"
                ),
                caption=text,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    if ORDER_CHANNEL:
        try:
            await bot.send_document(
                chat_id=ORDER_CHANNEL,
                document=BufferedInputFile(
                    excel_file,
                    filename=f"–ó–∞–∫–∞–∑_{order_data['user_id']}.xlsx"
                ),
                caption=text,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            await bot.send_message(
                admin_ids[0],
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {str(e)[:300]}"
            )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞")
    await db.connect()
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot, skip_updates=True)
    except asyncio.CancelledError:
        logging.info("Polling –æ—Ç–º–µ–Ω—ë–Ω")
    finally:
        logging.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        await bot.session.close()
        await db.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
